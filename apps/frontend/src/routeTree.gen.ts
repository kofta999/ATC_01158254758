/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as AdminLoginImport } from './routes/admin/login'
import { Route as AdminDashboardImport } from './routes/admin/dashboard'
import { Route as userProtectedRouteImport } from './routes/(user)/_protected/route'
import { Route as userEventsIndexImport } from './routes/(user)/events/index'
import { Route as AdminEventsNewImport } from './routes/admin/events/new'
import { Route as userEventsEventIdImport } from './routes/(user)/events/$eventId'
import { Route as userProtectedBookingsImport } from './routes/(user)/_protected/bookings'
import { Route as userauthRegisterImport } from './routes/(user)/(auth)/register'
import { Route as userauthLoginImport } from './routes/(user)/(auth)/login'
import { Route as AdminEventsEventIdEditImport } from './routes/admin/events/$eventId.edit'

// Create Virtual Routes

const userImport = createFileRoute('/(user)')()

// Create/Update Routes

const userRoute = userImport.update({
  id: '/(user)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminLoginRoute = AdminLoginImport.update({
  id: '/admin/login',
  path: '/admin/login',
  getParentRoute: () => rootRoute,
} as any)

const AdminDashboardRoute = AdminDashboardImport.update({
  id: '/admin/dashboard',
  path: '/admin/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const userProtectedRouteRoute = userProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => userRoute,
} as any)

const userEventsIndexRoute = userEventsIndexImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => userRoute,
} as any)

const AdminEventsNewRoute = AdminEventsNewImport.update({
  id: '/admin/events/new',
  path: '/admin/events/new',
  getParentRoute: () => rootRoute,
} as any)

const userEventsEventIdRoute = userEventsEventIdImport.update({
  id: '/events/$eventId',
  path: '/events/$eventId',
  getParentRoute: () => userRoute,
} as any)

const userProtectedBookingsRoute = userProtectedBookingsImport.update({
  id: '/bookings',
  path: '/bookings',
  getParentRoute: () => userProtectedRouteRoute,
} as any)

const userauthRegisterRoute = userauthRegisterImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => userRoute,
} as any)

const userauthLoginRoute = userauthLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => userRoute,
} as any)

const AdminEventsEventIdEditRoute = AdminEventsEventIdEditImport.update({
  id: '/admin/events/$eventId/edit',
  path: '/admin/events/$eventId/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(user)': {
      id: '/(user)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userImport
      parentRoute: typeof rootRoute
    }
    '/(user)/_protected': {
      id: '/(user)/_protected'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userProtectedRouteImport
      parentRoute: typeof userRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardImport
      parentRoute: typeof rootRoute
    }
    '/admin/login': {
      id: '/admin/login'
      path: '/admin/login'
      fullPath: '/admin/login'
      preLoaderRoute: typeof AdminLoginImport
      parentRoute: typeof rootRoute
    }
    '/(user)/(auth)/login': {
      id: '/(user)/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof userauthLoginImport
      parentRoute: typeof userImport
    }
    '/(user)/(auth)/register': {
      id: '/(user)/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof userauthRegisterImport
      parentRoute: typeof userImport
    }
    '/(user)/_protected/bookings': {
      id: '/(user)/_protected/bookings'
      path: '/bookings'
      fullPath: '/bookings'
      preLoaderRoute: typeof userProtectedBookingsImport
      parentRoute: typeof userProtectedRouteImport
    }
    '/(user)/events/$eventId': {
      id: '/(user)/events/$eventId'
      path: '/events/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof userEventsEventIdImport
      parentRoute: typeof userImport
    }
    '/admin/events/new': {
      id: '/admin/events/new'
      path: '/admin/events/new'
      fullPath: '/admin/events/new'
      preLoaderRoute: typeof AdminEventsNewImport
      parentRoute: typeof rootRoute
    }
    '/(user)/events/': {
      id: '/(user)/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof userEventsIndexImport
      parentRoute: typeof userImport
    }
    '/admin/events/$eventId/edit': {
      id: '/admin/events/$eventId/edit'
      path: '/admin/events/$eventId/edit'
      fullPath: '/admin/events/$eventId/edit'
      preLoaderRoute: typeof AdminEventsEventIdEditImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface userProtectedRouteRouteChildren {
  userProtectedBookingsRoute: typeof userProtectedBookingsRoute
}

const userProtectedRouteRouteChildren: userProtectedRouteRouteChildren = {
  userProtectedBookingsRoute: userProtectedBookingsRoute,
}

const userProtectedRouteRouteWithChildren =
  userProtectedRouteRoute._addFileChildren(userProtectedRouteRouteChildren)

interface userRouteChildren {
  userProtectedRouteRoute: typeof userProtectedRouteRouteWithChildren
  userauthLoginRoute: typeof userauthLoginRoute
  userauthRegisterRoute: typeof userauthRegisterRoute
  userEventsEventIdRoute: typeof userEventsEventIdRoute
  userEventsIndexRoute: typeof userEventsIndexRoute
}

const userRouteChildren: userRouteChildren = {
  userProtectedRouteRoute: userProtectedRouteRouteWithChildren,
  userauthLoginRoute: userauthLoginRoute,
  userauthRegisterRoute: userauthRegisterRoute,
  userEventsEventIdRoute: userEventsEventIdRoute,
  userEventsIndexRoute: userEventsIndexRoute,
}

const userRouteWithChildren = userRoute._addFileChildren(userRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof userProtectedRouteRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/login': typeof AdminLoginRoute
  '/login': typeof userauthLoginRoute
  '/register': typeof userauthRegisterRoute
  '/bookings': typeof userProtectedBookingsRoute
  '/events/$eventId': typeof userEventsEventIdRoute
  '/admin/events/new': typeof AdminEventsNewRoute
  '/events': typeof userEventsIndexRoute
  '/admin/events/$eventId/edit': typeof AdminEventsEventIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof userProtectedRouteRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/login': typeof AdminLoginRoute
  '/login': typeof userauthLoginRoute
  '/register': typeof userauthRegisterRoute
  '/bookings': typeof userProtectedBookingsRoute
  '/events/$eventId': typeof userEventsEventIdRoute
  '/admin/events/new': typeof AdminEventsNewRoute
  '/events': typeof userEventsIndexRoute
  '/admin/events/$eventId/edit': typeof AdminEventsEventIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(user)': typeof userRouteWithChildren
  '/(user)/_protected': typeof userProtectedRouteRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/login': typeof AdminLoginRoute
  '/(user)/(auth)/login': typeof userauthLoginRoute
  '/(user)/(auth)/register': typeof userauthRegisterRoute
  '/(user)/_protected/bookings': typeof userProtectedBookingsRoute
  '/(user)/events/$eventId': typeof userEventsEventIdRoute
  '/admin/events/new': typeof AdminEventsNewRoute
  '/(user)/events/': typeof userEventsIndexRoute
  '/admin/events/$eventId/edit': typeof AdminEventsEventIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin/dashboard'
    | '/admin/login'
    | '/login'
    | '/register'
    | '/bookings'
    | '/events/$eventId'
    | '/admin/events/new'
    | '/events'
    | '/admin/events/$eventId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin/dashboard'
    | '/admin/login'
    | '/login'
    | '/register'
    | '/bookings'
    | '/events/$eventId'
    | '/admin/events/new'
    | '/events'
    | '/admin/events/$eventId/edit'
  id:
    | '__root__'
    | '/'
    | '/(user)'
    | '/(user)/_protected'
    | '/admin/dashboard'
    | '/admin/login'
    | '/(user)/(auth)/login'
    | '/(user)/(auth)/register'
    | '/(user)/_protected/bookings'
    | '/(user)/events/$eventId'
    | '/admin/events/new'
    | '/(user)/events/'
    | '/admin/events/$eventId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  userRoute: typeof userRouteWithChildren
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminLoginRoute: typeof AdminLoginRoute
  AdminEventsNewRoute: typeof AdminEventsNewRoute
  AdminEventsEventIdEditRoute: typeof AdminEventsEventIdEditRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  userRoute: userRouteWithChildren,
  AdminDashboardRoute: AdminDashboardRoute,
  AdminLoginRoute: AdminLoginRoute,
  AdminEventsNewRoute: AdminEventsNewRoute,
  AdminEventsEventIdEditRoute: AdminEventsEventIdEditRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(user)",
        "/admin/dashboard",
        "/admin/login",
        "/admin/events/new",
        "/admin/events/$eventId/edit"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(user)": {
      "filePath": "(user)/_protected",
      "children": [
        "/(user)/_protected",
        "/(user)/(auth)/login",
        "/(user)/(auth)/register",
        "/(user)/events/$eventId",
        "/(user)/events/"
      ]
    },
    "/(user)/_protected": {
      "filePath": "(user)/_protected/route.tsx",
      "parent": "/(user)",
      "children": [
        "/(user)/_protected/bookings"
      ]
    },
    "/admin/dashboard": {
      "filePath": "admin/dashboard.tsx"
    },
    "/admin/login": {
      "filePath": "admin/login.tsx"
    },
    "/(user)/(auth)/login": {
      "filePath": "(user)/(auth)/login.tsx",
      "parent": "/(user)"
    },
    "/(user)/(auth)/register": {
      "filePath": "(user)/(auth)/register.tsx",
      "parent": "/(user)"
    },
    "/(user)/_protected/bookings": {
      "filePath": "(user)/_protected/bookings.tsx",
      "parent": "/(user)/_protected"
    },
    "/(user)/events/$eventId": {
      "filePath": "(user)/events/$eventId.tsx",
      "parent": "/(user)"
    },
    "/admin/events/new": {
      "filePath": "admin/events/new.tsx"
    },
    "/(user)/events/": {
      "filePath": "(user)/events/index.tsx",
      "parent": "/(user)"
    },
    "/admin/events/$eventId/edit": {
      "filePath": "admin/events/$eventId.edit.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
