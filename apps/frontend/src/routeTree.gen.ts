/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as userProtectedRouteImport } from './routes/(user)/_protected/route'
import { Route as adminAdminRouteImport } from './routes/(admin)/admin/route'
import { Route as userEventsIndexImport } from './routes/(user)/events/index'
import { Route as userEventsEventIdImport } from './routes/(user)/events/$eventId'
import { Route as userProtectedBookingsImport } from './routes/(user)/_protected/bookings'
import { Route as userProtectedBookingSuccessImport } from './routes/(user)/_protected/booking-success'
import { Route as userauthRegisterImport } from './routes/(user)/(auth)/register'
import { Route as userauthLoginImport } from './routes/(user)/(auth)/login'
import { Route as adminAdminLoginImport } from './routes/(admin)/admin/login'
import { Route as adminAdminDashboardIndexImport } from './routes/(admin)/admin/dashboard/index'
import { Route as adminAdminDashboardEventsNewImport } from './routes/(admin)/admin/dashboard/events/new'
import { Route as adminAdminDashboardEventsEventIdEditImport } from './routes/(admin)/admin/dashboard/events/$eventId.edit'

// Create Virtual Routes

const userImport = createFileRoute('/(user)')()

// Create/Update Routes

const userRoute = userImport.update({
  id: '/(user)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const userProtectedRouteRoute = userProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => userRoute,
} as any)

const adminAdminRouteRoute = adminAdminRouteImport.update({
  id: '/(admin)/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const userEventsIndexRoute = userEventsIndexImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => userRoute,
} as any)

const userEventsEventIdRoute = userEventsEventIdImport.update({
  id: '/events/$eventId',
  path: '/events/$eventId',
  getParentRoute: () => userRoute,
} as any)

const userProtectedBookingsRoute = userProtectedBookingsImport.update({
  id: '/bookings',
  path: '/bookings',
  getParentRoute: () => userProtectedRouteRoute,
} as any)

const userProtectedBookingSuccessRoute =
  userProtectedBookingSuccessImport.update({
    id: '/booking-success',
    path: '/booking-success',
    getParentRoute: () => userProtectedRouteRoute,
  } as any)

const userauthRegisterRoute = userauthRegisterImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => userRoute,
} as any)

const userauthLoginRoute = userauthLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => userRoute,
} as any)

const adminAdminLoginRoute = adminAdminLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => adminAdminRouteRoute,
} as any)

const adminAdminDashboardIndexRoute = adminAdminDashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => adminAdminRouteRoute,
} as any)

const adminAdminDashboardEventsNewRoute =
  adminAdminDashboardEventsNewImport.update({
    id: '/dashboard/events/new',
    path: '/dashboard/events/new',
    getParentRoute: () => adminAdminRouteRoute,
  } as any)

const adminAdminDashboardEventsEventIdEditRoute =
  adminAdminDashboardEventsEventIdEditImport.update({
    id: '/dashboard/events/$eventId/edit',
    path: '/dashboard/events/$eventId/edit',
    getParentRoute: () => adminAdminRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(admin)/admin': {
      id: '/(admin)/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof adminAdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/(user)': {
      id: '/(user)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userImport
      parentRoute: typeof rootRoute
    }
    '/(user)/_protected': {
      id: '/(user)/_protected'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userProtectedRouteImport
      parentRoute: typeof userRoute
    }
    '/(admin)/admin/login': {
      id: '/(admin)/admin/login'
      path: '/login'
      fullPath: '/admin/login'
      preLoaderRoute: typeof adminAdminLoginImport
      parentRoute: typeof adminAdminRouteImport
    }
    '/(user)/(auth)/login': {
      id: '/(user)/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof userauthLoginImport
      parentRoute: typeof userImport
    }
    '/(user)/(auth)/register': {
      id: '/(user)/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof userauthRegisterImport
      parentRoute: typeof userImport
    }
    '/(user)/_protected/booking-success': {
      id: '/(user)/_protected/booking-success'
      path: '/booking-success'
      fullPath: '/booking-success'
      preLoaderRoute: typeof userProtectedBookingSuccessImport
      parentRoute: typeof userProtectedRouteImport
    }
    '/(user)/_protected/bookings': {
      id: '/(user)/_protected/bookings'
      path: '/bookings'
      fullPath: '/bookings'
      preLoaderRoute: typeof userProtectedBookingsImport
      parentRoute: typeof userProtectedRouteImport
    }
    '/(user)/events/$eventId': {
      id: '/(user)/events/$eventId'
      path: '/events/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof userEventsEventIdImport
      parentRoute: typeof userImport
    }
    '/(user)/events/': {
      id: '/(user)/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof userEventsIndexImport
      parentRoute: typeof userImport
    }
    '/(admin)/admin/dashboard/': {
      id: '/(admin)/admin/dashboard/'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof adminAdminDashboardIndexImport
      parentRoute: typeof adminAdminRouteImport
    }
    '/(admin)/admin/dashboard/events/new': {
      id: '/(admin)/admin/dashboard/events/new'
      path: '/dashboard/events/new'
      fullPath: '/admin/dashboard/events/new'
      preLoaderRoute: typeof adminAdminDashboardEventsNewImport
      parentRoute: typeof adminAdminRouteImport
    }
    '/(admin)/admin/dashboard/events/$eventId/edit': {
      id: '/(admin)/admin/dashboard/events/$eventId/edit'
      path: '/dashboard/events/$eventId/edit'
      fullPath: '/admin/dashboard/events/$eventId/edit'
      preLoaderRoute: typeof adminAdminDashboardEventsEventIdEditImport
      parentRoute: typeof adminAdminRouteImport
    }
  }
}

// Create and export the route tree

interface adminAdminRouteRouteChildren {
  adminAdminLoginRoute: typeof adminAdminLoginRoute
  adminAdminDashboardIndexRoute: typeof adminAdminDashboardIndexRoute
  adminAdminDashboardEventsNewRoute: typeof adminAdminDashboardEventsNewRoute
  adminAdminDashboardEventsEventIdEditRoute: typeof adminAdminDashboardEventsEventIdEditRoute
}

const adminAdminRouteRouteChildren: adminAdminRouteRouteChildren = {
  adminAdminLoginRoute: adminAdminLoginRoute,
  adminAdminDashboardIndexRoute: adminAdminDashboardIndexRoute,
  adminAdminDashboardEventsNewRoute: adminAdminDashboardEventsNewRoute,
  adminAdminDashboardEventsEventIdEditRoute:
    adminAdminDashboardEventsEventIdEditRoute,
}

const adminAdminRouteRouteWithChildren = adminAdminRouteRoute._addFileChildren(
  adminAdminRouteRouteChildren,
)

interface userProtectedRouteRouteChildren {
  userProtectedBookingSuccessRoute: typeof userProtectedBookingSuccessRoute
  userProtectedBookingsRoute: typeof userProtectedBookingsRoute
}

const userProtectedRouteRouteChildren: userProtectedRouteRouteChildren = {
  userProtectedBookingSuccessRoute: userProtectedBookingSuccessRoute,
  userProtectedBookingsRoute: userProtectedBookingsRoute,
}

const userProtectedRouteRouteWithChildren =
  userProtectedRouteRoute._addFileChildren(userProtectedRouteRouteChildren)

interface userRouteChildren {
  userProtectedRouteRoute: typeof userProtectedRouteRouteWithChildren
  userauthLoginRoute: typeof userauthLoginRoute
  userauthRegisterRoute: typeof userauthRegisterRoute
  userEventsEventIdRoute: typeof userEventsEventIdRoute
  userEventsIndexRoute: typeof userEventsIndexRoute
}

const userRouteChildren: userRouteChildren = {
  userProtectedRouteRoute: userProtectedRouteRouteWithChildren,
  userauthLoginRoute: userauthLoginRoute,
  userauthRegisterRoute: userauthRegisterRoute,
  userEventsEventIdRoute: userEventsEventIdRoute,
  userEventsIndexRoute: userEventsIndexRoute,
}

const userRouteWithChildren = userRoute._addFileChildren(userRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof userProtectedRouteRouteWithChildren
  '/admin': typeof adminAdminRouteRouteWithChildren
  '/admin/login': typeof adminAdminLoginRoute
  '/login': typeof userauthLoginRoute
  '/register': typeof userauthRegisterRoute
  '/booking-success': typeof userProtectedBookingSuccessRoute
  '/bookings': typeof userProtectedBookingsRoute
  '/events/$eventId': typeof userEventsEventIdRoute
  '/events': typeof userEventsIndexRoute
  '/admin/dashboard': typeof adminAdminDashboardIndexRoute
  '/admin/dashboard/events/new': typeof adminAdminDashboardEventsNewRoute
  '/admin/dashboard/events/$eventId/edit': typeof adminAdminDashboardEventsEventIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof userProtectedRouteRouteWithChildren
  '/admin': typeof adminAdminRouteRouteWithChildren
  '/admin/login': typeof adminAdminLoginRoute
  '/login': typeof userauthLoginRoute
  '/register': typeof userauthRegisterRoute
  '/booking-success': typeof userProtectedBookingSuccessRoute
  '/bookings': typeof userProtectedBookingsRoute
  '/events/$eventId': typeof userEventsEventIdRoute
  '/events': typeof userEventsIndexRoute
  '/admin/dashboard': typeof adminAdminDashboardIndexRoute
  '/admin/dashboard/events/new': typeof adminAdminDashboardEventsNewRoute
  '/admin/dashboard/events/$eventId/edit': typeof adminAdminDashboardEventsEventIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(admin)/admin': typeof adminAdminRouteRouteWithChildren
  '/(user)': typeof userRouteWithChildren
  '/(user)/_protected': typeof userProtectedRouteRouteWithChildren
  '/(admin)/admin/login': typeof adminAdminLoginRoute
  '/(user)/(auth)/login': typeof userauthLoginRoute
  '/(user)/(auth)/register': typeof userauthRegisterRoute
  '/(user)/_protected/booking-success': typeof userProtectedBookingSuccessRoute
  '/(user)/_protected/bookings': typeof userProtectedBookingsRoute
  '/(user)/events/$eventId': typeof userEventsEventIdRoute
  '/(user)/events/': typeof userEventsIndexRoute
  '/(admin)/admin/dashboard/': typeof adminAdminDashboardIndexRoute
  '/(admin)/admin/dashboard/events/new': typeof adminAdminDashboardEventsNewRoute
  '/(admin)/admin/dashboard/events/$eventId/edit': typeof adminAdminDashboardEventsEventIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/admin/login'
    | '/login'
    | '/register'
    | '/booking-success'
    | '/bookings'
    | '/events/$eventId'
    | '/events'
    | '/admin/dashboard'
    | '/admin/dashboard/events/new'
    | '/admin/dashboard/events/$eventId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/admin/login'
    | '/login'
    | '/register'
    | '/booking-success'
    | '/bookings'
    | '/events/$eventId'
    | '/events'
    | '/admin/dashboard'
    | '/admin/dashboard/events/new'
    | '/admin/dashboard/events/$eventId/edit'
  id:
    | '__root__'
    | '/'
    | '/(admin)/admin'
    | '/(user)'
    | '/(user)/_protected'
    | '/(admin)/admin/login'
    | '/(user)/(auth)/login'
    | '/(user)/(auth)/register'
    | '/(user)/_protected/booking-success'
    | '/(user)/_protected/bookings'
    | '/(user)/events/$eventId'
    | '/(user)/events/'
    | '/(admin)/admin/dashboard/'
    | '/(admin)/admin/dashboard/events/new'
    | '/(admin)/admin/dashboard/events/$eventId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  adminAdminRouteRoute: typeof adminAdminRouteRouteWithChildren
  userRoute: typeof userRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  adminAdminRouteRoute: adminAdminRouteRouteWithChildren,
  userRoute: userRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(admin)/admin",
        "/(user)"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(admin)/admin": {
      "filePath": "(admin)/admin/route.tsx",
      "children": [
        "/(admin)/admin/login",
        "/(admin)/admin/dashboard/",
        "/(admin)/admin/dashboard/events/new",
        "/(admin)/admin/dashboard/events/$eventId/edit"
      ]
    },
    "/(user)": {
      "filePath": "(user)/_protected",
      "children": [
        "/(user)/_protected",
        "/(user)/(auth)/login",
        "/(user)/(auth)/register",
        "/(user)/events/$eventId",
        "/(user)/events/"
      ]
    },
    "/(user)/_protected": {
      "filePath": "(user)/_protected/route.tsx",
      "parent": "/(user)",
      "children": [
        "/(user)/_protected/booking-success",
        "/(user)/_protected/bookings"
      ]
    },
    "/(admin)/admin/login": {
      "filePath": "(admin)/admin/login.tsx",
      "parent": "/(admin)/admin"
    },
    "/(user)/(auth)/login": {
      "filePath": "(user)/(auth)/login.tsx",
      "parent": "/(user)"
    },
    "/(user)/(auth)/register": {
      "filePath": "(user)/(auth)/register.tsx",
      "parent": "/(user)"
    },
    "/(user)/_protected/booking-success": {
      "filePath": "(user)/_protected/booking-success.tsx",
      "parent": "/(user)/_protected"
    },
    "/(user)/_protected/bookings": {
      "filePath": "(user)/_protected/bookings.tsx",
      "parent": "/(user)/_protected"
    },
    "/(user)/events/$eventId": {
      "filePath": "(user)/events/$eventId.tsx",
      "parent": "/(user)"
    },
    "/(user)/events/": {
      "filePath": "(user)/events/index.tsx",
      "parent": "/(user)"
    },
    "/(admin)/admin/dashboard/": {
      "filePath": "(admin)/admin/dashboard/index.tsx",
      "parent": "/(admin)/admin"
    },
    "/(admin)/admin/dashboard/events/new": {
      "filePath": "(admin)/admin/dashboard/events/new.tsx",
      "parent": "/(admin)/admin"
    },
    "/(admin)/admin/dashboard/events/$eventId/edit": {
      "filePath": "(admin)/admin/dashboard/events/$eventId.edit.tsx",
      "parent": "/(admin)/admin"
    }
  }
}
ROUTE_MANIFEST_END */
